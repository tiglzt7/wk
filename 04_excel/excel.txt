Sub ExtractLeftEightCharacters()
    Dim rng As Range
    Dim cell As Range

    '選択範囲を取得
    Set rng = Application.Selection

    '各セルに対して処理を実行
    For Each cell In rng
        'セルの値を文字列に変換し、左から8文字を取得
        cell.Value = Left(CStr(cell.Value), 8)
    Next cell
End Sub


Sub ZeroPaddingToEightCharacters()
    Dim rng As Range
    Dim cell As Range

    '選択範囲を取得
    Set rng = Application.Selection

    '各セルに対して処理を実行
    For Each cell In rng
        'セルの書式を文字列に設定
        cell.NumberFormat = "@"
        'セルの値を文字列に変換し、左側を0で埋めて8桁にする
        cell.Value = Right("00000000" & CStr(cell.Value), 8)
    Next cell
End Sub


Sub ZeroPaddingToElevenCharacters()
    Dim rng As Range
    Dim cell As Range

    '選択範囲を取得
    Set rng = Application.Selection

    '各セルに対して処理を実行
    For Each cell In rng
        'セルの書式を文字列に設定
        cell.NumberFormat = "@"
        'セルの値を文字列に変換し、右側を0で埋めて11桁にする
        cell.Value = Left(CStr(cell.Value) & "00000000000", 11)
    Next cell
End Sub


Sub CombineSelectedColumns()

    ' 選択された範囲を取得
    Dim rng As Range
    Set rng = Selection

    ' 最初の選択範囲の開始行を取得
    Dim startRow As Long
    startRow = rng.Areas(1).Row

    ' 結果を格納する新しい列を作成
    Dim resultCol As Range
    Set resultCol = rng.Parent.Cells(startRow, rng.Parent.Columns.Count).End(xlToLeft).Offset(0, 1)

    Dim rowIdx As Long
    For rowIdx = 1 To rng.Rows.Count
        Dim combinedValue As String
        combinedValue = ""

        ' 選択範囲の各領域に対してループを実行
        Dim area As Range
        For Each area In rng.Areas
            
            Dim colIdx As Long
            For colIdx = 1 To area.Columns.Count
                ' 選択された列の値を結合
                combinedValue = combinedValue & area.Cells(rowIdx, colIdx).Value
            Next colIdx

        Next area

        ' 結果を新しい列に書き込む
        resultCol.Cells(rowIdx, 1).Value = combinedValue
    Next rowIdx

End Sub


Sub RemoveDuplicatesWithCondition()

    Dim ws As Worksheet
    Dim rng As Range
    Dim LastRow As Long
    Dim i As Long
    
    Set ws = ActiveSheet
    LastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row ' A列の最終行を探します。"A"をデータの開始地点に合わせて調整してください。

    ' 一時的な列を作成します。ここではZ列を使用していますが、使用していない任意の列を選んでください。
    ws.Range("Z1:Z" & LastRow).ClearContents ' 初めて使用する前に一時的な列をクリアします。
    
    For i = 2 To LastRow
        If Application.WorksheetFunction.CountIf(ws.Range("A2:A" & LastRow), ws.Cells(i, "A").Value) > 1 And ws.Cells(i, "B").Value <> 1 Then
            ' "A"は"先品"の列、"B"は"L1"の列に対応しています。このマクロの中で列指定を行う際は、これらの値を自分のデータに合わせて調整してください。
            ws.Cells(i, "Z").Value = "DELETE" ' 一時的な列に"DELETE"のマークをつけます。
        End If
    Next i
    
    ' 一時的な列に基づいて行を削除します。
    For i = LastRow To 2 Step -1
        If ws.Cells(i, "Z").Value = "DELETE" Then
            ws.Rows(i).Delete
        End If
    Next i

    ' 一時的な列をクリアします。
    ws.Range("Z1:Z" & LastRow).ClearContents

End Sub


Sub SplitCellsAtFirstSpace()
    Dim rng As Range
    Dim cell As Range
    Dim txt As String
    Dim splitText() As String
    Dim ws As Worksheet

    Set rng = Application.Selection
    Set ws = ActiveSheet

    '新しい列を作成
    ws.Columns(rng.Columns.Count + rng.Column).Insert Shift:=xlToRight
    ws.Columns(rng.Columns.Count + rng.Column).Insert Shift:=xlToRight

    For Each cell In rng
        If Not IsEmpty(cell) Then
            txt = cell.Value
            splitText = Split(txt, " ", 2)  '最初のスペースでテキストを分割
            ws.Cells(cell.Row, rng.Column + rng.Columns.Count).Value = splitText(0)  '分割された最初の部分を新しいセルに配置
            If UBound(splitText) > 0 Then  '2つ以上の部分がある場合
                ws.Cells(cell.Row, rng.Column + rng.Columns.Count + 1).Value = splitText(1)  '分割された2番目の部分をさらに新しいセルに配置
            End If
        End If
    Next cell
End Sub


Sub FillFirstRow()

    ' 列名を配列として定義
    Dim colNames As Variant
    colNames = Array("列1", _
                     "列2", _
                     "列3", _
                     "列4", _
                     "列5", _
                     "列6", _
                     "列7", _
                     "列8", _
                     "列9", _
                     "列10")
    
    ' 1行目の各列に値を設定
    Dim i As Integer
    For i = 1 To 10
        Cells(1, i).Value = colNames(i - 1)
    Next i

End Sub


Sub ShowUserForm()
    UserForm1.Show  ' UserForm1は実際のユーザーフォーム名に置き換えてください
End Sub


仮

Private Sub UserForm_Initialize()

    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") '適切なワークシート名に変更してください
    Dim c As Range

    ' 1行目の全てのカラムを走査し、カラム名をリストボックスに追加
    For Each c In ws.Range("1:1").Cells
        If c.Value <> "" Then
            ListBox1.AddItem c.Value
        End If
    Next c

End Sub








Private Sub ListBox1_Click()

End Sub

Private Sub UserForm_Initialize()

    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") '適切なワークシート名に変更してください
    Dim c As Range

    ' 1行目の全てのカラムを走査し、カラム名をリストボックスに追加
    For Each c In ws.Range("1:1").Cells
        If c.Value <> "" Then
            ListBox1.AddItem c.Value
        End If
    Next c

End Sub

Private Sub CommandButton1_Click()

    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") '適切なワークシート名に変更してください
    Dim i As Integer
    Dim keepColumns() As String
    Dim colName As String

    ' 選択されたカラム名を配列に格納
    Dim selectedIndex As Integer
    selectedIndex = 0
    For i = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(i) Then
            selectedIndex = selectedIndex + 1
        End If
    Next i
    
    ' 選択された要素がない場合にはエラーメッセージを表示して終了
    If selectedIndex = 0 Then
        MsgBox "少なくとも1つの列を選択してください。", vbInformation
        Exit Sub
    End If
    
    ReDim keepColumns(0 To selectedIndex - 1)
    selectedIndex = 0
    For i = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(i) Then
            keepColumns(selectedIndex) = ListBox1.List(i)
            selectedIndex = selectedIndex + 1
        End If
    Next i

    ' 1行目の全てのカラムを走査し、選択されていないカラムを削除
    For i = ws.Cells(1, Columns.count).End(xlToLeft).Column To 1 Step -1
        colName = ws.Cells(1, i).Value
        If Not IsInArray(colName, keepColumns) Then
            ws.Columns(i).Delete
        End If
    Next i

    ' ユーザーフォームを閉じる
    Unload Me

End Sub

' 配列内に特定の値が存在するかチェックする関数
Function IsInArray(valToBeFound As Variant, arr As Variant) As Boolean
    IsInArray = (UBound(Filter(arr, valToBeFound)) > -1)
End Function

